#!/usr/bin/env python3

# PROBLEM #2
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

import sys

def generate_fibonacci_numbers(ceiling):
    fib_numbers = [0, 1]
    while True:
        # We start with two elements, we're guaranteed
        # that on the first loop, this will make sense.
        new_number = fib_numbers[-2] + fib_numbers[-1]
        if new_number >= ceiling:
            break
        fib_numbers.append(new_number)
    return fib_numbers

def sum_even_fibonacci_numbers(ceiling):
    from functools import reduce
    numbers = generate_fibonacci_numbers(ceiling)
    even_numbers = filter(lambda x: x % 2 == 0, numbers)
    return reduce(lambda x, y: x + y, even_numbers)

def main():
    result = sum_even_fibonacci_numbers(4000000)
    print(result)

if __name__ == '__main__':
    main()