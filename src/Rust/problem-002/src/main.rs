/* [PROBLEM #2]
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms. */

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_solution() {
        assert_eq!(sum_even_fibonacci_numbers(4_000_000), 4_613_732);
    }
}

fn sum_even_fibonacci_numbers(limit: i32) -> i32 {
    // What we're after!
    let mut sum : i32 = 0;

    // The base case for the Fibonacci sequence uses 0 and 1 as the previous terms.
    let mut first : i32 = 0;
    let mut second : i32 = 1;

    let mut current : i32 = 0;

    while current <= limit {
        current = first + second;
        first = second;
        second = current;
        if current % 2 == 0 {
            sum += current;
        }
    }

    return sum;
}

fn main() {
    let result : i32 = sum_even_fibonacci_numbers(4_000_000);
    println!("{}", result);
}
